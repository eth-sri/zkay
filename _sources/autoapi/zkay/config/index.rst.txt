:mod:`zkay.config`
==================

.. py:module:: zkay.config




Module Contents
---------------

.. function:: zk_print(*args, verbosity_level=1, **kwargs)


.. function:: zk_print_banner(title: str)


.. py:class:: Config

   Bases: :class:`zkay.config_user.UserConfig`

   .. method:: _load_cfg_file_if_exists(self, filename)



   .. method:: load_configuration_from_disk(self, local_cfg_file: str)



   .. method:: override_defaults(self, overrides: Dict[str, Any])



   .. method:: export_compiler_settings(self)



   .. method:: import_compiler_settings(self, vals: dict)



   .. method:: library_compilation_environment(self)


      Use this fixed configuration compiling libraries to get reproducible output.


   .. method:: library_solc_version(self)
      :property:



   .. method:: zkay_version(self)
      :property:


      zkay version number


   .. method:: zkay_solc_version_compatibility(self)
      :property:


      Target solidity language level for the current zkay version


   .. method:: solc_version(self)
      :property:



   .. method:: override_solc(new_version)
      :staticmethod:



   .. method:: key_bits(self)
      :property:



   .. method:: key_bytes(self)
      :property:



   .. method:: rnd_bytes(self)
      :property:



   .. method:: cipher_bytes_payload(self)
      :property:



   .. method:: cipher_bytes_meta(self)
      :property:



   .. method:: is_symmetric_cipher(self)



   .. method:: cipher_payload_len(self)
      :property:



   .. method:: cipher_len(self)
      :property:



   .. method:: key_len(self)
      :property:



   .. method:: randomness_len(self)
      :property:



   .. method:: proof_len(self)
      :property:



   .. method:: external_crypto_lib_names(self)
      :property:


      Names of all solidity libraries in verify_libs.sol, which need to be linked against.


   .. method:: should_use_hash(self, circuit: CircuitHelper)


      This function determines whether input hashing is used for a particular circuit.

      :return: if true, all public circuit inputs are passed as private inputs into the circuit and only their combined hash-
               value is passed as a public input. This makes verification constant-cost,
               but increases offchain resource usage during key and proof generation.


   .. method:: reserved_name_prefix(self)
      :property:


      Identifiers in user code must not start with this prefix.

      This is to ensure that user code does not interfere with the additional code generated by the zkay compiler.


   .. method:: reserved_conflict_resolution_suffix(self)
      :property:


      Identifiers in user code must not end with this suffix.

      This is used for resolving conflicts with python globals in the generated offchain simulation code.


   .. method:: get_internal_name(self, fct)



   .. method:: get_verification_contract_name(self, contract: str, fct: str)



   .. method:: get_circuit_output_dir_name(self, verifier_name: str)


      Return the output directory for an individual circuit


   .. method:: get_contract_var_name(type_name: str)
      :staticmethod:


      Return an identifier referring to the address variable of verification contract of type 'type_name'

      :param type_name: name of the unqualified verification contract type
      :return: new identifier


   .. method:: pki_contract_name(self)
      :property:



   .. method:: zk_out_name(self)
      :property:



   .. method:: zk_in_name(self)
      :property:



   .. method:: proof_param_name(self)
      :property:



   .. method:: return_var_name(self)
      :property:



   .. method:: field_prime_var_name(self)
      :property:



   .. method:: prover_key_hash_name(self)
      :property:



   .. method:: zk_struct_prefix(self)
      :property:



   .. method:: zk_data_var_name(self)
      :property:



   .. method:: jsnark_circuit_classname(self)
      :property:



   .. method:: verification_function_name(self)
      :property:



   .. method:: cipher_chunk_size(self)
      :property:



   .. method:: rnd_chunk_size(self)
      :property:



   .. method:: is_unit_test(self)
      :property:




.. data:: cfg
   

   

