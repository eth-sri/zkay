:mod:`zkay.compiler.privacy.circuit_generation.circuit_generator`
=================================================================

.. py:module:: zkay.compiler.privacy.circuit_generation.circuit_generator




Module Contents
---------------

.. py:class:: CircuitGenerator(circuits: List[CircuitHelper], proving_scheme: ProvingScheme, output_dir: str, parallel_keygen: bool)

   A circuit generator takes an abstract circuit representation and turns it into a concrete zk-snark circuit.

   It also handles prover/verification key generation and parsing, and generates the verification contracts using the supplied
   proving scheme.

   .. method:: generate_circuits(self, *, import_keys: bool)


      Generate circuit code and verification contracts based on the provided circuits and proving scheme.

      :param import_keys: if false, new verification and prover keys will be generated, otherwise key files for all verifiers
                          are expected to be already present in the respective output directories


   .. method:: get_all_key_paths(self)


      Return paths of all key files for this contract.


   .. method:: get_verification_contract_filenames(self)


      Return file paths for all verification contracts generated by this CircuitGenerator


   .. method:: __init_worker(counter, total_count)
      :staticmethod:



   .. method:: _generate_keys_par(self, circuit: CircuitHelper)



   .. method:: _get_circuit_output_dir(self, circuit: CircuitHelper)


      Return the output directory for an individual circuit


   .. method:: _get_vk_and_pk_paths(self, circuit: CircuitHelper)


      Return a tuple which contains the paths to the verification and prover key files.


   .. method:: _generate_zkcircuit(self, import_keys: bool, circuit: CircuitHelper)
      :abstractmethod:


      Generate code and compile a single circuit.

      When implementing a new backend, this function should generate a concrete circuit representation, which has:
      a) circuit IO corresponding to circuit.sec_idfs/output_idfs/input_idfs
      b) logic corresponding to the non-CircCall statements in circuit.phi
      c) a), b) and c) for the circuit associated with the target function for every CircCall statement in circuit.phi

      The output of this function should be in a state where key generation can be invoked immediately without further transformations
      (i.e. any intermediary compilation steps should also happen here).

      It should be stored in self._get_circuit_output_dir(circuit)

      :return: True if the circuit was modified since last generation (need to generate new keys)


   .. method:: _generate_keys(self, circuit: CircuitHelper)
      :abstractmethod:


      Generate prover and verification keys for the circuit stored in self._get_circuit_output_dir(circuit).


   .. method:: get_vk_and_pk_filenames(cls)
      :classmethod:
      :abstractmethod:



   .. method:: _parse_verification_key(self, circuit: CircuitHelper)
      :abstractmethod:


      Parse the generated verificaton key file and return a verification key object compatible with self.proving_scheme


   .. method:: _get_prover_key_hash(self, circuit: CircuitHelper)
      :abstractmethod:



   .. method:: _get_primary_inputs(self, circuit: CircuitHelper)


      Return list of all public input locations
      :param circuit: abstract circuit representation
      :return: list of location strings, a location is either an identifier name or an array index



