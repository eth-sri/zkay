:mod:`zkay.compiler.privacy.proving_scheme.proving_scheme`
==========================================================

.. py:module:: zkay.compiler.privacy.proving_scheme.proving_scheme




Module Contents
---------------

.. py:class:: G1Point(x: str, y: str)

   Data class to represent curve points

   .. method:: negated(self)



   .. method:: from_seq(seq)
      :staticmethod:


      Construct G1Point from a sequence of length 2 of integer literal strings
      First entry makes up the X coordinate, second entry makes up the Y coordinate


   .. method:: from_it(it)
      :staticmethod:



   .. method:: __str__(self)


      Return str(self).



.. py:class:: G2Point(x1: str, x2: str, y1: str, y2: str)

   Data class to represent curve points which are encoded using two field elements

   .. method:: from_seq(seq)
      :staticmethod:


      Construct G1Point from a sequence of length 4 of integer literal strings
      First two entries make up the X coordinate, last two entries make up the Y coordinate


   .. method:: from_it(it)
      :staticmethod:



   .. method:: __str__(self)


      Return str(self).



.. py:class:: VerifyingKey

   Abstract base data class for verification keys

   .. method:: create_dummy_key(cls)
      :classmethod:
      :abstractmethod:


      Generate a dummy key.



.. py:class:: ProvingScheme

   Abstract base class for proving schemes

   A proving scheme provides functionality to generate a verification contract from a proving-scheme dependent verification-key
   and an abstract circuit representation

   .. py:class:: VerifyingKey

      Bases: :class:`zkay.compiler.privacy.proving_scheme.proving_scheme.VerifyingKey`

      Abstract base data class for verification keys


   .. attribute:: verify_libs_contract_filename
      :annotation: = ./verify_libs.sol

      

   .. attribute:: snark_scalar_field_var_name
      :annotation: = snark_scalar_field

      

   .. attribute:: hash_var_name
      :annotation: = hash

      Special variable names usable by the verification contract


   .. attribute:: name
      :annotation: = none

      Proving scheme name, overridden by child classes


   .. method:: generate_verification_contract(self, verification_key: VerifyingKey, circuit: CircuitHelper, primary_inputs: List[str], prover_key_hash: bytes)
      :abstractmethod:


      Generate a verification contract for the zk-snark corresponding to circuit.

      :param verification_key: parsed verification key which was previously generated for circuit
      :param circuit: the circuit for which to generate the verification contract
      :param primary_inputs: list of all public input locations (strings which represent either identifiers or array index expressions)
      :param prover_key_hash: sha3 hash of the prover key
      :return: verification contract text



