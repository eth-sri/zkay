:mod:`zkay.compiler.privacy.proving_scheme.backends.gm17`
=========================================================

.. py:module:: zkay.compiler.privacy.proving_scheme.backends.gm17

.. autoapi-nested-parse::

   This module defines the verification key, proof and verification contract format for the GM17 proving scheme

   See "Snarky Signatures: Minimal Signatures of Knowledge from Simulation-Extractable SNARKs", Jens Groth and Mary Maller, IACR-CRYPTO-2017
   https://eprint.iacr.org/2017/540




Module Contents
---------------

.. py:class:: ProvingSchemeGm17

   Bases: :class:`zkay.compiler.privacy.proving_scheme.proving_scheme.ProvingScheme`

   Abstract base class for proving schemes

   A proving scheme provides functionality to generate a verification contract from a proving-scheme dependent verification-key
   and an abstract circuit representation

   .. py:class:: VerifyingKey(h: G2Point, g_alpha: G1Point, h_beta: G2Point, g_gamma: G1Point, h_gamma: G2Point, query: List[G1Point])

      Bases: :class:`zkay.compiler.privacy.proving_scheme.proving_scheme.VerifyingKey`

      Abstract base data class for verification keys

      .. method:: create_dummy_key(cls)
         :classmethod:


         Generate a dummy key.



   .. attribute:: name
      :annotation: = gm17

      

   .. method:: generate_verification_contract(self, verification_key: VerifyingKey, circuit: CircuitHelper, primary_inputs: List[str], prover_key_hash: bytes)


      Generate a verification contract for the zk-snark corresponding to circuit.

      :param verification_key: parsed verification key which was previously generated for circuit
      :param circuit: the circuit for which to generate the verification contract
      :param primary_inputs: list of all public input locations (strings which represent either identifiers or array index expressions)
      :param prover_key_hash: sha3 hash of the prover key
      :return: verification contract text



